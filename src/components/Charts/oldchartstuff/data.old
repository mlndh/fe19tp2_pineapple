import { volvoyears } from './volvo';
import { audiyears } from './audi';
import { skodayears } from './skoda';
import { volkswagenyears } from './volkswagen';
import { seatyears } from './seat';
import { renaultyears } from './enault';
import { daciayears } from './dacia';
import { fiatyears } from './fiat';
import { fordyears } from './ford';
import { bmwyears } from './bmw';
import { mercedesbenzyears } from './mercedes';
import { landroveryears } from './landrover';
import { porscheyears } from './porsche';
import { hyundaiyears } from './hyundai'







const arrAvg = arr => arr.reduce((a, b) => {
    //console.log("a: " + a);
    //console.log("b: " + b);
    return Number(a) + Number(b)
}, 0) / arr.length

export const averagePrices = () => {
    let audiyears = audi.results.map(item => item.nybilspris);
    let volvoyears = volvo.results.map(item => item.nybilspris);
    let skodayears = skoda.results.map(item => item.nybilspris);
    let volkswagenyears = volkswagen.results.map(item => item.nybilspris);
    let seatyears = seat.results.map(item => item.nybilspris);
    let renaultyears = renault.results.map(item => item.nybilspris);
    let daciayears = dacia.results.map(item => item.nybilspris);
    let fiatyears = fiat.results.map(item => item.nybilspris);
    let fordyears = ford.results.map(item => item.nybilspris);
    let bmwyears = bmw.results.map(item => item.nybilspris);
    let mercedesyears = mercedes.results.map(item => item.nybilspris);
    let landroveryears = landrover.results.map(item => item.nybilspris);
    let porscheyears = porsche.results.map(item => item.nybilspris);
    let hyundaiyears = hyundai.results.map(item => item.nybilspris);









    return {
        audi: arrAvg(audiyears), volvo: arrAvg(volvoyears), skoda: arrAvg(skodayears),
        volkswagen: arrAvg(volkswagenyears), seat: arrAvg(seatyears), renault: arrAvg(renaultyears),
        dacia: arrAvg(daciayears), fiat: arrAvg(fiatyears), ford: arrAvg(fordyears), bmw: arrAvg(bmwyears),
        mercedes: arrAvg(mercedesyears), landrover: arrAvg(landroveryears), porsche: arrAvg(porscheyears),
        hyundai: arrAvg(hyundaiyears)

    }
}

/* export const unique = [...new Set(mixed.results.map(item => item.marke))];
 */
/*
{audi: 340000, volvo: 105000}
{2019: 2944334, 2018: 3489384, 2017: 98249284}
*/


